plugins {
	id 'de.fntsoftware.gradle.markdown-to-pdf' version '1.0.1'
	id 'java'
	id 'application'


	// we don't want to cause conflicts between our dependencies and the target application
	// since the agent will be loaded with the same class loader as the profiled application
	// so we use the shadow plugin to relocate our dependencies
	id 'com.github.johnrengelman.shadow' version '4.0.3'
	id 'maven'
}

version appVersion

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

group 'eu.cqse'
version pluginVersion

ext {
    outputVersion = rootProject.appVersion + '-jacoco-' + jacocoVersion
}

jar {
	classifier = null
	manifest {
		attributes 'Premain-Class': 'eu.cqse.teamscale.jacoco.agent.PreMain'
	}
}

dependencies {
	implementation project(':teamscale-client')
	implementation project(':report-generator')

    implementation "org.jacoco:org.jacoco.core:$jacocoVersion"
    implementation "org.jacoco:org.jacoco.report:$jacocoVersion"
    implementation "org.jacoco:org.jacoco.agent:$jacocoVersion:runtime"

	implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
	implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

	implementation 'io.reactivex.rxjava2:rxjava:2.1.2'
    implementation 'com.beust:jcommander:1.71'
    implementation 'org.conqat:org.conqat.lib.commons:0.20160822'

    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.sparkjava:spark-core:2.7.2'
	implementation 'com.google.code.gson:gson:2.8.5'
	implementation 'com.squareup.moshi:moshi:1.8.0'

	implementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.2.0'
	implementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.2.0'
	implementation group: 'org.junit.platform', name: 'junit-platform-engine', version: '1.2.0'
	implementation group: 'org.junit.platform', name: 'junit-platform-console', version: '1.2.0'

	compile group: 'org.ow2.asm', name: 'asm', version: '6.2.1'

	compile group: 'junit', name: 'junit', version: '4.12'
	compile group: 'org.testng', name: 'testng', version: '6.11'

	implementation 'com.squareup.retrofit2:retrofit:2.4.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
	implementation 'com.squareup.retrofit2:converter-scalars:2.4.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.8.0'

	testRuntime("org.junit.vintage:junit-vintage-engine:4.12.3")
}

test {
	testLogging.exceptionFormat "full"
}

mainClassName = 'com.teamscale.jacoco.agent.Main'

shadowJar {
	baseName = 'teamscale-jacoco-agent'
	classifier = null
	// since this is used as an agent, we want it to always have the same name
	// otherwise people have to adjust their -javaagent parameters after every
	// update
	version = null
	manifest {
		attributes 'Premain-Class': 'com.teamscale.jacoco.agent.PreMain'

		// The jaxb library, which we are shading is a multi release jar, so we have to explicitly "inherit" this attribute
		attributes 'Multi-Release': 'true'
	}

	relocate 'org.junit', 'org.junit'
	// Fix relocation of multi version jar
	// Default would be shadow/META-INF/versions/9/, which is wrong
	// See http://openjdk.java.net/jeps/238
	relocate 'META-INF/versions/9/', 'META-INF/versions/9/shadow/'

	mergeServiceFiles()
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
	target = tasks.shadowJar
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

tasks.named('shadowDistZip').configure {
	archiveName = 'teamscale-jacoco-agent.zip'
}

processResources {
    filesMatching('**/app.properties') {
        filter {
            it.replace('%APP_VERSION_TOKEN_REPLACED_DURING_BUILD%', rootProject.appVersion)
        }
    }
}

install {
	repositories.mavenInstaller {
		configuration = configurations.shadow
		pom.whenConfigured { it.dependencies.clear() }
	}
}

// At the moment we are stuck with the old maven plugin until support for private key
// files is added or we add a dedicated user with a password to our server.
// https://github.com/gradle/gradle/issues/1263
uploadShadow {
	repositories {
		mavenDeployer {
			configuration = configurations.deployerJars
			repository(url: cqseMavenRepositoryUrl) {
				authentication(userName: cqseMavenRepositoryUser, privateKey: cqseMavenRepositoryPrivateKey)
			}
			pom.whenConfigured { it.dependencies.clear() }
		}
	}
}